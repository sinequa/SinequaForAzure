{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "prefix": {
            "type": "string",
            "defaultValue": "sq"
        },
        "location": {
            "type": "string"
        },
        "adminUsername": {
            "type": "string"
        },
        "adminPassword": {
            "type": "secureString"
        },
        "vmSize": {
            "type": "string"
        },
        "vmIndexerSize": {
            "type": "string"
        },
        "vmIndexerScaleSetSize": {
            "type": "int",
            "defaultValue": 1
        },
        "vmConnectorSize": {
            "type": "string"
        },
        "vmConnectorScaleSetSize": {
            "type": "int",
            "defaultValue": 1
        },        
        "primaryNodeCount": {
            "type": "int"
        },
        "virtualNetworkName": {
            "type": "string"
        },
        "addressPrefixes": {
            "type": "array"
        },
        "appSubnetName": {
            "type": "string"
        },
        "frontSubnetName": {
            "type": "string"
        },
        "appSubnetPrefix": {
            "type": "string"
        },
        "frontSubnetPrefix": {
            "type": "string"
        },        
        "loadBalancerType": {
            "type": "string"
        },
        "certificateBase64": {
            "type": "securestring"
        },
        "certificatePassword": {
            "type": "securestring"
        },
        "license": {
            "type": "string"
        },
        "imageReferenceId": {
            "type": "string",
            "defaultValue": ""
        },
        "currentTime": {
            "type": "string",
            "defaultValue": "[utcNow()]"
        },
        "customData": {
            "type": "secureString",
            "defaultValue": "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<Sinequa>
	<Configuration>
		<Indexers>
			<Indexer>
				<Name>elastic-indexer</Name>			
				<Node>[indexerScaleSet]</Node>
			</Indexer>
		</Indexers>
		<Engines>
			<Engine>
				<Name>engine1</Name>
				<Node>[virtualMachineName]-2</Node>
			</Engine>
			<Engine>
				<Name>engine2</Name>
				<Node>[virtualMachineName]-3</Node>
			</Engine>
		</Engines>
		<WebApps>
			<WebApp>
				<Name>webapp1</Name>
				<Node>[virtualMachineName]-1</Node>
			</WebAapp>
            <WebApp>
				<Name>webapp2</Name>
				<Node>[virtualMachineName]-2</Node>
			</WebApp>
		</WebApps>
        <QueueClusters>
			<QueueCluster>
				<Name>queuecluster1</Name>
				<QueueClusterType>highlyavailable</QueueClusterType>
				<Node1>
                    <Node>[virtualMachineName]-1</Node>
                    <Port></Port>
                    <SslPort></SslPort>
                </Node1>
				<Node2>
                    <Node>[virtualMachineName]-2</Node>
                    <Port></Port>
                    <SslPort></SslPort>
                </Node2>
				<Node3>
                    <Node>[virtualMachineName]-3</Node>
                    <Port></Port>
                    <SslPort></SslPort>
                </Node3>
				<Volumes>
					<e>
						<Id>1</Id>
					</e>
				</Volumes>
			</QueueCluster>
		</QueueClusters>
        <Store>
			<DocumentCache>
				<Name>dc_azure</Name>
				<Type>azure</Type>
				<Azure>
                    <AccountName>[storageAccount]</AccountName>
					<Container>sinequa-document-cache</Container>
				</Azure>	
			</DocumentCache>
		</Store>	
        <Global>
			<DefaultStoreDocumentCache>dc_azure</DefaultStoreDocumentCache>
	        <DefaultStoreAudit>Default</DefaultStoreAudit>
            <DefaultStoreLog>Default</DefaultStoreLog>
            <IsBeta>true</IsBeta>
            <DefaultNode>[virtualMachineName]-1</DefaultNode>
            <Licence>
[Invalid License]
</Licence>
		</Global>	
	</Configuration>
</Sinequa>
"
        },
        "customData2": {
            "type": "secureString",
            "defaultValue": "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<Sinequa>
	<Configuration>
		<Indexers>
			<Indexer>
				<Name>elastic-indexer</Name>			
				<Node>[indexerScaleSet]</Node>
			</Indexer>
		</Indexers>
		<Engines>
			<Engine>
				<Name>Engine1</Name>
				<Node>[virtualMachineName]-1</Node>
			</Engine>
		</Engines>
		<WebApps>
			<WebApp>
				<Name>WebApp1</Name>
				<Node>[virtualMachineName]-1</Node>
			</WebApp>
		</WebApps>
        <QueueClusters>
			<QueueCluster>
				<Name>QueueCluster1</Name>
				<QueueClusterType>standalone</QueueClusterType>
				<Node>[virtualMachineName]-1</Node>
				<Volumes>
					<e>
						<Id>1</Id>
					</e>
				</Volumes>
                <Node1>
                    <Node>[virtualMachineName]-1</Node>
                </Node1>                
			</QueueCluster>
		</QueueClusters>
        <Store>
			<DocumentCache>
				<Name>dc_azure</Name>
				<Type>azure</Type>
				<Azure>
                    <AccountName>[storageAccount]</AccountName>
					<Container>sinequa-document-cache</Container>
				</Azure>	
			</DocumentCache>
		</Store>	
        <Global>
			<DefaultStoreDocumentCache>dc_azure</DefaultStoreDocumentCache>
	        <DefaultStoreAudit>Default</DefaultStoreAudit>
            <DefaultStoreLog>Default</DefaultStoreLog>
            <DefaultNode>[virtualMachineName]-1</DefaultNode>
            <IsBeta>true</IsBeta>
            <Licence>
[Invalid License]
</Licence>            
		</Global>	
	</Configuration>
</Sinequa>
"
        }
    },
    "variables": {
        "appNetworkSecurityGroupName": "[concat('nsg-',parameters('prefix'), '-app')]",
        "frontNetworkSecurityGroupName": "[concat('nsg-',parameters('prefix'), '-front')]",
        "appNsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('appNetworkSecurityGroupName'))]",
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "appSubnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('appsubnetName'))]",
        "frontSubnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('frontsubnetName'))]",
        "networkInterfaceName": "[concat('nic-',parameters('prefix'))]",
        "publicIpAddressName": "[concat('pip-',parameters('prefix'))]",
        "publicIpAddressType": "Dynamic",
        "patchMode": "AutomaticByOS",
        "dataDiskName": "[concat('datadisk-', parameters('prefix'))]",
        "osDiskName": "[concat('osdisk-', parameters('prefix'))]",
        "dataDiskSize": 100,
        "publicIpAddressSku": "Basic",
        "virtualMachineName": "[concat('vm-', parameters('prefix'))]",
        "keyVaultName": "[substring(concat('kv-', parameters('prefix'), '-', replace(guid(resourceGroup().id), '-', '')), 0, 24)]",
        "osDiskType": "Premium_LRS",
        "storageAccountName": "[substring(concat('st',replace(guid(resourceGroup().id), '-', '')), 0, 24)]",
        "indexerScaleSetName": "[concat('vmss-', parameters('prefix'), '-indexer')]",
        "connectorScaleSetName": "[concat('vmss-', parameters('prefix'), '-connector')]",
        "containerName": "sinequa-document-cache",        
        "keyVaultSecretsOfficer": "[concat('/subscriptions/', subscription().subscriptionId,    '/providers/Microsoft.Authorization/roleDefinitions/', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
        "Contributor": "[concat('/subscriptions/', subscription().subscriptionId,               '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "Reader": "[concat('/subscriptions/', subscription().subscriptionId,                    '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "availabilitySetName": "[concat('as-', parameters('prefix'))]",
        "Sinequa_PrimaryNodes_1": "[concat('1=srpc://', variables('virtualMachineName'),'-1:10301')]", 
        "Sinequa_PrimaryNodes_3": "[concat('1=srpc://', variables('virtualMachineName'),'-1:10301,2=srpc://', variables('virtualMachineName'),'-2:10301,3=srpc://', variables('virtualMachineName'),'-3:10301')]", 
        "Sinequa_PrimaryNodes": "[if(equals(parameters('primaryNodeCount'), 3),variables('Sinequa_PrimaryNodes_3'),variables('Sinequa_PrimaryNodes_1'))]",
        "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },   
        "applicationGatewayName": "[concat('ag-', parameters('prefix'))]",
        "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName'))]",     
        "plan": {
            "publisher": "sinequa",
            "product": "sinequa_virtual_machine",
            "name": "nightly"
        },
        "imageReferenceWithImage": {
            "id": "[parameters('imageReferenceId')]"
        },
        "imageReferenceWithPlan": {
            "publisher": "sinequa",
            "offer": "sinequa_virtual_machine",
            "sku": "nightly",
            "version": "latest"
        },
        "networkSecurityGroupRules": [
            {
                "name": "RDP",
                "properties": {
                    "priority": 300,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "3389"
                }
            }
        ],
        "appNetworkInterfaceConfigurations": [
            {
                "name": "[concat('nic-',parameters('prefix'),'-app')]",
                "primary": true,
                "subnetId": "[variables('appSubnetRef')]",
                "applicationGatewayBackendAddressPools": [],
                "loadBalancerBackendAddressPools": [],
                "applicationSecurityGroups": [],
                "loadBalancerInboundNatPools": [],
                "enableAcceleratedNetworking": false,
                "nsgName": "",
                "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('appNetworkSecurityGroupName'))]",
                "pipName": ""
            }
        ],
        "appGwInternal" : {
            "subnet": {
                "id": "[variables('frontSubnetRef')]"
            }
        },
        "appGwExternal": {
            "PublicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/',concat('pip-',parameters('prefix'),'-ag'))]"
            }
        }
    },
    "functions": [
        {
            "namespace": "sinequa",
            "members": {
                "licenseToCustomData": {
                    "parameters": [
                        {
                            "name": "customdata",
                            "type": "string"
                        },
                        {
                            "name": "license",
                            "type": "string"
                        },
                        {
                            "name": "virtualMachineName",
                            "type": "string"
                        },
                        {
                            "name": "storageAccount",
                            "type": "string"
                        },   
                        {
                            "name": "indexerScaleSet",
                            "type": "string"
                        }                        
                    ],
                    "output": {
                        "type": "string",
                        "value": "[replace(replace(replace(replace(
                            parameters('customdata'),
                            '[Invalid License]',replace(replace(parameters('license'),'&','&amp;'),'<','&lt;')),
                            '[virtualMachineName]', parameters('virtualMachineName')),
                            '[storageAccount]', parameters('storageAccount')),
                            '[indexerScaleSet]',parameters('indexerScaleSet'))
                        ]"
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "pid-87de579d-e85a-4cd1-bbc8-948cfa1d8152",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "apiVersion": "2020-06-01",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "apiVersion": "2018-02-14",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": false,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": true,
                "accessPolicies": [],
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 90,
                "networkAcls": {
                    "value": {
                        "defaultAction": "allow",
                        "bypass": "AzureServices",
                        "ipRules": [],
                        "virtualNetworkRules": []
                    }
                }
            }           
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'os-username')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "apiVersion": "2019-09-01",
            "properties": {
                "value": "[parameters('adminUsername')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'os-password')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "apiVersion": "2019-09-01",
            "properties": {
                "value": "[parameters('adminPassword')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'sinequa-primarynodes')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "apiVersion": "2019-09-01",
            "properties": {
                "value": "[variables('Sinequa_PrimaryNodes')]"
            }
        },        
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/', 'sinequa-grid')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "apiVersion": "2019-09-01",
            "properties": {
                "value": "[parameters('prefix')]"
            }
        }, 
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-01-01-preview",
            "name": "[guid(resourceGroup().id, concat('keyVaultSecretsOfficer', variables('virtualMachineName'), copyIndex('IdentityCopy', 1)))]",
            "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretsOfficer')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1))), '2020-06-01', 'Full').identity.principalId]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/',  concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1)))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
             "copy": {
                "name": "IdentityCopy",
                "count": "[parameters('primaryNodeCount')]"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-01-01-preview",
            "name": "[guid(resourceGroup().id, concat('keyVaultSecretsOfficer', variables('connectorScaleSetName')))]",
            "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretsOfficer')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('connectorScaleSetName')), '2020-06-01', 'Full').identity.principalId]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('connectorScaleSetName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ]
        },                
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-01-01-preview",
            "name": "[guid(resourceGroup().id, concat('keyVaultSecretsOfficer', variables('indexerScaleSetName')))]",
            "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretsOfficer')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('indexerScaleSetName')), '2020-06-01', 'Full').identity.principalId]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('indexerScaleSetName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ]
        },     

        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storageAccountName')]",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "accessTier": "Hot"
            },
            "resources": [
                {
                    "type": "blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat('default/', variables('containerName'))]",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('networkInterfaceName'), '-', copyIndex('node',1))]",
            "apiVersion": "2018-10-01",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('appNetworkSecurityGroupName'))]",
                "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'), '-', copyIndex('node',1))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
                "[concat('Microsoft.Network/applicationGateways/', variables('applicationGatewayName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig-1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('appSubnetRef')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', concat(variables('publicIpAddressName') ,'-', copyIndex('node',1)))]"
                            },
                            "applicationGatewayBackendAddressPools": [
                            {
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Network/applicationGateways/', variables('applicationGatewayName') ,'/backendAddressPools/sinequaBackendPool')]"
                            }]
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('appNsgId')]"
                }
            },
            "copy": {
                "name": "node",
                "count": "[parameters('primaryNodeCount')]"
            }
        },        
        {
            "name": "[variables('appNetworkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },            
            "apiVersion": "2019-02-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": "[variables('networkSecurityGroupRules')]"
            }
        },

        {
            "name": "[variables('frontNetworkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },            
            "apiVersion": "2019-02-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": "[variables('networkSecurityGroupRules')]"
            }
        },

        {
            "name": "[parameters('virtualNetworkName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-09-01",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('appNetworkSecurityGroupName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('frontNetworkSecurityGroupName'))]"
            ],


            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "subnets": [
                    {
                        "name": "[parameters('appSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('appSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appNetworkSecurityGroupName'))]"
                            }
                        }
                    },
                    {
                        "name": "[parameters('frontSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('frontSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('frontNetworkSecurityGroupName'))]"
                            }
                        }
                    }
                ]
            }
        },

        {
            "name": "[concat(variables('publicIpAddressName') ,'-', copyIndex('IpCopy',1))]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2019-02-01",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIpAllocationMethod": "[variables('publicIpAddressType')]"
            },
            "sku": {
                "name": "[variables('publicIpAddressSku')]"
            },
            "copy": {
                "name": "IpCopy",
                "count": "[parameters('primaryNodeCount')]"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(resourceGroup().id, concat('ResourceGroupReader', variables('virtualMachineName'), copyIndex('IdentityCopy', 1)))]",
            "apiVersion": "2017-09-01",
            "properties": {
                "roleDefinitionId": "[variables('Reader')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1))), '2020-06-01', 'Full').identity.principalId]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/',  concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1)))]"
            ],
            "copy": {
                "name": "IdentityCopy",
                "count": "[parameters('primaryNodeCount')]"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(resourceGroup().id, concat('StorageAccountContributor', copyIndex('IdentityCopy',1)))]",
            "apiVersion": "2020-04-01-preview",
            "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]",
            "properties": {
                "roleDefinitionId": "[variables('Contributor')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1))), '2020-06-01', 'Full').identity.principalId]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Compute/virtualMachines/', concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1)))]"
            ],
            "copy": {
                "name": "IdentityCopy",
                "count": "[parameters('primaryNodeCount')]"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(resourceGroup().id, concat('ResourceGroupReader', variables('connectorScaleSetName')))]",
            "apiVersion": "2017-09-01",
            "properties": {
                "roleDefinitionId": "[variables('Reader')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('connectorScaleSetName')), '2020-06-01', 'Full').identity.principalId]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/',  variables('connectorScaleSetName'))]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(resourceGroup().id, concat('StorageAccountContributor', variables('connectorScaleSetName')))]",
            "apiVersion": "2020-04-01-preview",
            "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]",
            "properties": {
                "roleDefinitionId": "[variables('Contributor')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('connectorScaleSetName')), '2020-06-01', 'Full').identity.principalId]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Compute/virtualMachineScaleSets/',  variables('connectorScaleSetName'))]"
            ]
        }, 
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(resourceGroup().id, concat('ResourceGroupReader', variables('indexerScaleSetName')))]",
            "apiVersion": "2017-09-01",
            "properties": {
                "roleDefinitionId": "[variables('Reader')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('indexerScaleSetName')), '2020-06-01', 'Full').identity.principalId]",
                "scope": "[resourceGroup().id]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachineScaleSets/',  variables('indexerScaleSetName'))]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(resourceGroup().id, concat('StorageAccountContributor', variables('indexerScaleSetName'), parameters('currentTime')))]",
            "apiVersion": "2020-04-01-preview",
            "scope": "[concat('Microsoft.Storage/storageAccounts', '/', variables('storageAccountName'))]",
            "properties": {
                "roleDefinitionId": "[variables('Contributor')]",
                "principalId": "[reference(concat('Microsoft.Compute/virtualMachineScaleSets/', variables('indexerScaleSetName')), '2020-06-01', 'Full').identity.principalId]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Compute/virtualMachineScaleSets/',  variables('indexerScaleSetName'))]"
            ]
        },        
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('virtualMachineName'), '-', copyIndex('IdentityCopy',1),'/ManagedIdentityExtensionForWindows')]",
            "apiVersion": "2018-06-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'),'-', copyIndex('IdentityCopy',1))]"
            ],
            "properties": {
                "publisher": "Microsoft.ManagedIdentity",
                "type": "ManagedIdentityExtensionForWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "port": 50342
                }
            },
            "copy": {
                "name": "IdentityCopy",
                "count": "[parameters('primaryNodeCount')]"
            }
        },
        {
            "name": "[variables('availabilitySetName')]",
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2019-07-01",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "location": "[resourceGroup().location]",
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
            },
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', concat(variables('networkInterfaceName'), '-', copyIndex('VmCopy',1)))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "name": "[concat(variables('virtualMachineName'), '-', copyIndex('VmCopy',1))]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]",
                "Sinequa_Role" : "Primary Node",
                "Sinequa_PrimaryNodes" : "[variables('Sinequa_PrimaryNodes')]",
                "Sinequa_PrimaryNode_Id": "[copyIndex('VmCopy',1)]",
                "Sinequa_NodeName": "[concat(variables('virtualMachineName'), '-', copyIndex('VmCopy',1))]",
                "Sinequa_WebAppName": "[concat('WebApp', copyIndex('VmCopy',1))]",
                "Sinequa_KeyVault": "[variables('keyVaultName')]"                
            },
            "apiVersion": "2020-06-01",
            "location": "[resourceGroup().location]",
            "plan": "[if(empty(parameters('imageReferenceId')),variables('plan'),json('null'))]",
            "properties": {
                "osProfile": {
                    "computerName": "[concat(variables('virtualMachineName'), '-', copyIndex('VmCopy',1))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "windowsConfiguration": {
                        "enableAutomaticUpdates": true,
                        "provisionVmAgent": true,
                        "patchSettings": {
                            "patchMode": "[variables('patchMode')]"
                        }
                    },
                    "customData": "[base64(if(equals(parameters('primaryNodeCount'), 3), sinequa.licenseToCustomData(parameters('customData'), parameters('license'), variables('virtualMachineName'), variables('storageAccountName'), variables('indexerScaleSetName')), sinequa.licenseToCustomData(parameters('customData2'), parameters('license'), variables('virtualMachineName'), variables('storageAccountName'), variables('indexerScaleSetName'))))]"
                },                  
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage",
                        "name": "[concat(variables('osDiskName'), '_', copyIndex('VmCopy',1))]",
                        "managedDisk": {
                            "storageAccountType": "[variables('osDiskType')]"
                        }
                    },
                    "imageReference": "[if(empty(parameters('imageReferenceId')),variables('imageReferenceWithPlan'),variables('imageReferenceWithImage'))]",
                    "dataDisks": [
                        {
                            "lun": 1,
                            "name": "[concat(variables('dataDiskName'), '_', copyIndex('VmCopy',1))]",
                            "createOption": "Empty",
                            "caching": "ReadOnly",
                            "writeAcceleratorEnabled": false,
                            "managedDisk": {
                                "storageAccountType": "Premium_LRS"
                            },
                            "diskSizeGB": "[variables('dataDiskSize')]"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('networkInterfaceName'), '-', copyIndex('VmCopy',1)))]"
                        }
                    ]
                },               
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                },
                "availabilitySet": "[if(equals(variables('availabilitySetName'), 'None'), json('null'), variables('availabilitySet'))]"
            },
            "resources": [
                {
                    "type": "extensions",
                    "name": "CustomScriptExtension",
                    "apiVersion": "2017-03-30",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[concat(variables('virtualMachineName'), '-', copyIndex('VmCopy',1))]"
                    ],
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.8",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "commandToExecute": "Powershell -command C:\\sinequa\\scripts\\sinequa-az-startup.ps1"
                        }
                    }
                }
            ],
            "copy": {
                "name": "VmCopy",
                "count": "[parameters('primaryNodeCount')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[variables('indexerScaleSetName')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]",
                "Sinequa_Role" : "Indexer",
                "Sinequa_PrimaryNodes" : "[variables('Sinequa_PrimaryNodes')]",
                "Sinequa_NodeName": "[variables('indexerScaleSetName')]",
                "Sinequa_KeyVault": "[variables('keyVaultName')]"                
            },
            "apiVersion": "2019-12-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('appNetworkSecurityGroupName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "sku": {
                "name": "[parameters('vmIndexerSize')]",
                "capacity": "[parameters('vmIndexerScaleSetSize')]"
            },
            "plan": "[if(empty(parameters('imageReferenceId')),variables('plan'),json('null'))]",
            "properties": {
                "overprovision": true,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "singlePlacementGroup": true,
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "fromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                                "storageAccountType": "[variables('osDiskType')]"
                            }
                        },
                        "imageReference": "[if(empty(parameters('imageReferenceId')),variables('imageReferenceWithPlan'),variables('imageReferenceWithImage'))]"
                    },
                    "priority": "Regular",
                    "networkProfile": {
                        "copy": [
                            {
                                "name": "networkInterfaceConfigurations",
                                "count": "[length(variables('appNetworkInterfaceConfigurations'))]",
                                "input": {
                                    "name": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].name]",
                                    "properties": {
                                        "primary": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].primary]",
                                        "enableAcceleratedNetworking": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].enableAcceleratedNetworking]",
                                        "ipConfigurations": [
                                            {
                                                "name": "[concat(variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].name, '-defaultIpConfiguration')]",
                                                "properties": {
                                                    "subnet": {
                                                        "id": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].subnetId]"
                                                    },
                                                    "primary": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].primary]",
                                                    "applicationGatewayBackendAddressPools": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].applicationGatewayBackendAddressPools]",
                                                    "loadBalancerBackendAddressPools": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].loadBalancerBackendAddressPools]",
                                                    "loadBalancerInboundNatPools": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].loadBalancerInboundNatPools]",
                                                    "publicIPAddressConfiguration": "[if( equals( variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].pipName, ''), json('null'), union(json(concat('{\"name\": \"', variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].pipName, '\"}')),json('{\"properties\": { \"idleTimeoutInMinutes\": 15}}')))]"
                                                }
                                            }
                                        ],
                                        "networkSecurityGroup": "[if( equals( variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].nsgId, ''), json('null'),json(concat('{\"id\": \"', variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].nsgId, '\"}')))]"
                                    }
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "ManagedIdentityWindowsExtension",
                                "properties": {
                                    "publisher": "Microsoft.ManagedIdentity",
                                    "type": "ManagedIdentityExtensionForWindows",
                                    "typeHandlerVersion": "1.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "port": 50342
                                    }
                                }
                            },
                            {
                                "name": "customScript",
                                "properties": {
                                "publisher": "Microsoft.Compute",
                                "typeHandlerVersion": "1.8",
                                "autoUpgradeMinorVersion": true,
                                "protectedSettings": {
                                    "commandToExecute": "Powershell -command C:\\sinequa\\scripts\\sinequa-az-startup.ps1"
                                },
                                "type": "CustomScriptExtension"
                                }
                            }
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": false
                        }
                    },
                    "osProfile": {
                        "computerNamePrefix": "[toLower(substring(concat(variables('indexerScaleSetName'), uniqueString(resourceGroup().id)), 0, 9))]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]",
                        "customData": "[base64(if(equals(parameters('primaryNodeCount'), 3), sinequa.licenseToCustomData(parameters('customData'), parameters('license'), variables('virtualMachineName'), variables('storageAccountName'), variables('indexerScaleSetName')), sinequa.licenseToCustomData(parameters('customData2'), parameters('license'), variables('virtualMachineName'), variables('storageAccountName'), variables('indexerScaleSetName'))))]",
                        "windowsConfiguration": {
                            "provisionVmAgent": true
                        }
                    }
                },
                "scaleInPolicy": {
                    "rules": [
                        "Default"
                    ]
                },
                "platformFaultDomainCount": "5"
            }
        },
        {
            "name": "[variables('connectorScaleSetName')]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "identity": {
                "type": "SystemAssigned"
            },
            "apiVersion": "2019-12-01",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]",
                "Sinequa_Role" : "Connector",
                "Sinequa_PrimaryNodes" : "[variables('Sinequa_PrimaryNodes')]",
                "Sinequa_NodeName": "[variables('connectorScaleSetName')]",
                "Sinequa_KeyVault": "[variables('keyVaultName')]"                
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('appNetworkSecurityGroupName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "sku": {
                "name": "[parameters('vmConnectorSize')]",
                "capacity": "[parameters('vmConnectorScaleSetSize')]"
            },
            "plan": "[if(empty(parameters('imageReferenceId')),variables('plan'),json('null'))]",
            "properties": {
                "overprovision": true,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "singlePlacementGroup": true,
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "fromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                                "storageAccountType": "[variables('osDiskType')]"
                            }
                        },
                        "imageReference": "[if(empty(parameters('imageReferenceId')),variables('imageReferenceWithPlan'),variables('imageReferenceWithImage'))]"
                    },
                    "priority": "Regular",
                    "networkProfile": {
                        "copy": [
                            {
                                "name": "networkInterfaceConfigurations",
                                "count": "[length(variables('appNetworkInterfaceConfigurations'))]",
                                "input": {
                                    "name": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].name]",
                                    "properties": {
                                        "primary": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].primary]",
                                        "enableAcceleratedNetworking": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].enableAcceleratedNetworking]",
                                        "ipConfigurations": [
                                            {
                                                "name": "[concat(variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].name, '-defaultIpConfiguration')]",
                                                "properties": {
                                                    "subnet": {
                                                        "id": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].subnetId]"
                                                    },
                                                    "primary": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].primary]",
                                                    "applicationGatewayBackendAddressPools": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].applicationGatewayBackendAddressPools]",
                                                    "loadBalancerBackendAddressPools": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].loadBalancerBackendAddressPools]",
                                                    "loadBalancerInboundNatPools": "[variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].loadBalancerInboundNatPools]",
                                                    "publicIPAddressConfiguration": "[if( equals( variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].pipName, ''), json('null'), union(json(concat('{\"name\": \"', variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].pipName, '\"}')),json('{\"properties\": { \"idleTimeoutInMinutes\": 15}}')))]"
                                                }
                                            }
                                        ],
                                        "networkSecurityGroup": "[if( equals( variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].nsgId, ''), json('null'),json(concat('{\"id\": \"', variables('appNetworkInterfaceConfigurations')[copyIndex('networkInterfaceConfigurations')].nsgId, '\"}')))]"
                                    }
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "ManagedIdentityWindowsExtension",
                                "properties": {
                                    "publisher": "Microsoft.ManagedIdentity",
                                    "type": "ManagedIdentityExtensionForWindows",
                                    "typeHandlerVersion": "1.0",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "port": 50342
                                    }
                                }
                            },
                            {
                                "name": "customScript",
                                "properties": {
                                "publisher": "Microsoft.Compute",
                                "typeHandlerVersion": "1.8",
                                "autoUpgradeMinorVersion": true,
                                "protectedSettings": {
                                    "commandToExecute": "Powershell -command C:\\sinequa\\scripts\\sinequa-az-startup.ps1"
                                },
                                "type": "CustomScriptExtension"
                                }
                            }                            
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": false
                        }
                    },
                    "osProfile": {
                        "computerNamePrefix": "[toLower(substring(concat(variables('connectorScaleSetName'), uniqueString(resourceGroup().id)), 0, 9))]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]",
                        "customData": "[base64(if(equals(parameters('primaryNodeCount'), 3), sinequa.licenseToCustomData(parameters('customData'), parameters('license'), variables('virtualMachineName'), variables('storageAccountName'), variables('indexerScaleSetName')), sinequa.licenseToCustomData(parameters('customData2'), parameters('license'), variables('virtualMachineName'), variables('storageAccountName'), variables('indexerScaleSetName'))))]",
                        "windowsConfiguration": {
                            "provisionVmAgent": true
                        }
                    }
                },
                "scaleInPolicy": {
                    "rules": [
                        "Default"
                    ]
                },
                "platformFaultDomainCount": "5"
            }
        },        
        {
            "name": "[variables('applicationGatewayName')]",
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },
            "zones": [],
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
                "[if(equals(parameters('loadBalancerType'), 'external'),concat('Microsoft.Network/publicIPAddresses/', concat('pip-',parameters('prefix'),'-ag')), json('null'))]"
            ],
            "properties": {
                "sku": {
                    "name": "Standard_Medium",
                    "tier": "Standard",
                    "capacity": 2
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('frontSubnetRef')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGwFrontendIp",
                        "properties": "[if(equals(parameters('loadBalancerType'), 'external'),variables('appGwExternal'),variables('appGwInternal'))]"
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "port_443",
                        "properties": {
                            "Port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "sinequaBackendPool",
                        "properties": {
                            "backendAddresses": []
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "http",
                        "properties": {
                            "Port": 80,
                            "Protocol": "Http",
                            "cookieBasedAffinity": "Disabled",
                            "requestTimeout": 20
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "httpslistener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendIPConfigurations/appGwFrontendIp')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendPorts/port_443')]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[concat(variables('applicationGatewayId'), '/sslCertificates/sinequaFrontEnd')]"
                            }
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "https",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('applicationGatewayId'), '/httpListeners/httpslistener')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('applicationGatewayId'), '/backendAddressPools/sinequaBackendPool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('applicationGatewayId'), '/backendHttpSettingsCollection/http')]"
                            }
                        }
                    }
                ],
                "enableHttp2": false,
                "sslCertificates": [
                    {
                        "name": "sinequaFrontEnd",
                        "properties": {
                            "data": "[parameters('certificateBase64')]",
                            "password": "[parameters('certificatePassword')]"
                        }
                    }
                ],
                "probes": []
            }
        },
        {
            "condition": "[equals(parameters('loadBalancerType'), 'external')]",
            "name": "[concat('pip-',parameters('prefix'),'-ag')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "tags": {
                "Sinequa_Grid" : "[parameters('prefix')]"
            },           
            "apiVersion": "2019-11-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        }       
    ],
    "outputs": {
        "osUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        }
        /*,
        "loadBalancerIp": {
            "type": "object",
            "value": "[reference(resourceId('Microsoft.Network/loadBalancers/', concat(variables('lbname'), '-', 'internal'))).frontendIPConfigurations]"
        }*/
    }
}